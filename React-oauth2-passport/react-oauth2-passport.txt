CLIENT

cd client

npx create-react-app --template typescript ./

crear directorios
    Homepage
        Homepage.module.css
        Homepage.tsx
    Loginpage
        LoginPage.module.css
        LoginPage.tsx

npm i react-router-dom
npm i @types/react-router-dom -D


npm i axios
npm i @types/axios







BACKEND

cd backend

npm init -y

npm i express 
npm i typescript @types/express ts-node --dev


create   src \ index.ts

in package.json
    create   "dev" (script): "ts-node index.ts"

npm i --save-dev mongoose
npm i --save-dev @types/mongoose

abrir mongo db cloud
    cluster  [connect] > Connect application  >  DRIVER: node.js  VERSION: 3.6 or later
    copiar cadena y pegar en  index.ts
    error al  correr    npm run dev     agregar configuracion  { useNewUrlParser: true,  useUnifiedTopology: true }

npm i --save-dev nodemon

npm i dotenv

npm i cors @types/cors session @types/express-session passport
    mover los types a   dev  dependencies
npm i --save-dev @types/passport


npm i passport-google-oauth20


crear app en consola de desarrollo de google 
    crear ID de cliente de OAuth2.0
        origen autorizado de javascript:  http://localhost:4000
        redireccionamiento callback: http://localhost:4000/auth/google/callback


npm i passport-github
npm i @types/passport-github -D





Github Links for Awesome OAuth Strategies We Will Be Using: 

Google OAuth2.0: https://github.com/jaredhanson/passport-google-oauth2
Twitter OAuth2.0: https://github.com/hewmen/passport-twitter-oauth2
Github OAuth2.0: https://github.com/jaredhanson/passport-github



Dependencies (Required In Produciton):

bcryptjs -> Password Hashing
cors -> Cross Origin Security
dotenv -> Access Env Variables
express -> Backend Library 
express-session -> "In Memory" Sessions Handled With Express, Passport Requires This
mongoose -> ORM To Access Resources For the MongoDB Database
passport -> Library For Easy Secure Authentication of Users Using Express
passport-google-oauth20 -> The Google Strategy for Passport
passport-local -> Local Authentication Strategy with Passport
passport-twitter-oauth2 -> Twitter Authentication Strategy with Passport 
passport-github -> Github Authentication With Passport

Dev Dependencies (Only Needed when Writing the Code [Not Required In Production]):

@types/bcryptjs
@types/cors
@types/express 
@types/express-session 
@types/mongoose 
@types/passport 
@types/passport-local
@types/passport-twitter-oauth2
@types/passport-google-oauth20
@types/passport-github

ðŸ‘† These Packages are Just Typescript Support For Dependencies (So we can use the packages type definitions)

nodemon -> To Restart Server on Every Change When Building the Application
typescript -> Typescript Obviously is Necessary
tsc -> Compile to Javascript (Build Javascript Code, For Production)
ts-node -> Compile to Javascript & Run on the Fly (For Development)
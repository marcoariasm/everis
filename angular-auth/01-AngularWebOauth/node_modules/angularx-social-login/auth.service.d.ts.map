{"version":3,"file":"auth.service.d.ts","sources":["auth.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Observable, ReplaySubject } from 'rxjs';\r\nimport { LoginProvider } from './entities/login-provider';\r\nimport { SocialUser } from './entities/user';\r\nexport interface AuthServiceConfigItem {\r\n    id: string;\r\n    provider: LoginProvider;\r\n    /**\r\n     * This field allows to load login providers SDKs lazily.\r\n     * Lazy loading is activated if it's true and vice versa.\r\n     */\r\n    lazyLoad?: boolean;\r\n}\r\nexport interface LoginOpt {\r\n    /**\r\n     * Facebook FB.login options: https://developers.facebook.com/docs/reference/javascript/FB.login/v2.11.\r\n     */\r\n    auth_type?: string;\r\n    scope?: string;\r\n    return_scopes?: boolean;\r\n    enable_profile_selector?: boolean;\r\n    profile_selector_ids?: string;\r\n    /**\r\n     * Google gapi.auth2.ClientConfig: \\\r\n     * https://developers.google.com/api-client-library/javascript/reference/referencedocs#gapiauth2clientconfig.\r\n     */\r\n    client_id?: string;\r\n    cookie_policy?: string;\r\n    fetch_basic_profile?: boolean;\r\n    hosted_domain?: string;\r\n    openid_realm?: string;\r\n    ux_mode?: string;\r\n    redirect_uri?: string;\r\n    offline_access?: boolean;\r\n    prompt?: string;\r\n    login_hint?: string;\r\n}\r\nexport declare class AuthServiceConfig {\r\n    lazyLoad: boolean;\r\n    providers: Map<string, LoginProvider>;\r\n    _ready: ReplaySubject<any>;\r\n    constructor(providers: AuthServiceConfigItem[] | Observable<AuthServiceConfigItem[]>);\r\n    initialize(providers: AuthServiceConfigItem[]): void;\r\n}\r\nexport declare class AuthService {\r\n    private static readonly ERR_LOGIN_PROVIDER_NOT_FOUND;\r\n    private static readonly ERR_NOT_LOGGED_IN;\r\n    private providers;\r\n    private _user;\r\n    private _authState;\r\n    private _readyState;\r\n    private initialized;\r\n    get authState(): Observable<SocialUser>;\r\n    /** Provides an array of provider ID's as they become ready */\r\n    get readyState(): Observable<string[]>;\r\n    constructor(config: AuthServiceConfig);\r\n    private initialize;\r\n    signIn(providerId: string, opt?: LoginOpt): Promise<SocialUser>;\r\n    signOut(revoke?: boolean): Promise<any>;\r\n}\r\n"]}